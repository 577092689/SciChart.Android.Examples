//******************************************************************************
// SCICHART® Copyright SciChart Ltd. 2011-2016. All rights reserved.
//
// Web: http://www.scichart.com
// Support: support@scichart.com
// Sales:   sales@scichart.com
//
// build.gradle is part of the SCICHART® Examples. Permission is hereby granted
// to modify, create derivative works, distribute and publish any part of this source
// code whether for commercial, private or personal use.
//
// The SCICHART® examples are distributed in the hope that they will be useful, but
// without any warranty. It is provided "AS IS" without warranty of any kind, either
// expressed or implied.
//******************************************************************************

apply plugin: 'java'
// Top-level build file where you can add configuration options common to all sub-projects/modules.
//@BEGINDELETE
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def artifactoryVersion = project.hasProperty('artifactoryVersion') ? project.property('artifactoryVersion') : System.getenv('artifactory_VERSION')
def artifactoryUser = project.hasProperty('artifactoryUser') ? project.property('artifactoryUser') : System.getenv('artifactory_USER')
def artifactoryPassword = project.hasProperty('artifactoryPassword') ? project.property('artifactoryPassword') : System.getenv('artifactory_PASSWORD')

def artifactoryRepo = artifactoryVersion.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'
//@ENDDELETE

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        //@BEGINDELETE
        //classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.1.1"
        //@ENDDELETE

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

ext {
    minSdkVersion = project.hasProperty('minSdkVersion') ? project.getProperty('minSdkVersion') : 19
    compileSdkVersion = project.hasProperty('compileSdkVersion') ? project.getProperty('compileSdkVersion') : 25
    buildToolsVersion = project.hasProperty('buildToolsVersion') ? project.getProperty('buildToolsVersion') : '25.0.2'

    sourceCompatibility = JavaVersion.VERSION_1_7
    //@BEGINDELETE
    minifyEnabled = true
    /* //@ENDDELETE
    minifyEnabled = false
    */ //@DELETELINE

    versionCode = 1
    versionName = "1.0"
    documentationFolder = "${rootDir}/outputJavadoc/"
}

task deleteExistingZip(type: Delete) {
    delete file("outputAar/sciChart.zip")
}

gradle.projectsEvaluated {
    deleteExistingZip.dependsOn "" +
            ":core:testReleaseUnitTest",
            ":data:testReleaseUnitTest",
            ":drawing:testReleaseUnitTest",
            ":charting:testReleaseUnitTest",
            ":extensions:testReleaseUnitTest"
}

task zip(type: Zip, dependsOn: deleteExistingZip) {
    from ('charting/build/outputs/aar') {
        include 'charting-release.aar'
    }
    from ('drawing/build/outputs/aar') {
        include 'drawing-release.aar'
    }
    from ('data/build/outputs/aar') {
        include 'data-release.aar'
    }
    from ('core/build/outputs/aar') {
        include 'core-release.aar'
    }
    from ('extensions/build/outputs/aar') {
        include 'extensions-release.aar'
    }
    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChart'
}


task deleteExistingJavadocZip(type: Delete) {
    delete file("outputAar/sciChartJavadocs.zip")
}

gradle.projectsEvaluated {
    deleteExistingJavadocZip.dependsOn "" +
            ":core:generateReleaseJavadocJar",
            ":data:generateReleaseJavadocJar",
            ":drawing:generateReleaseJavadocJar",
            ":charting:generateReleaseJavadocJar"
}

task zipJavadocs(type: Zip, dependsOn: deleteExistingJavadocZip) {
    from (rootProject.ext.documentationFolder) {
        include 'charting-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'drawing-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'data-release-javadoc.jar'
    }
    from (rootProject.ext.documentationFolder) {
        include 'core-release-javadoc.jar'
    }

    destinationDir file("${rootDir}/outputAar/")
    baseName = 'sciChartJavadocs'
}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = System.getenv("ANDROID_NDK_HOME")
        def ndkBuildPath = Os.isFamily(Os.FAMILY_WINDOWS) ? "$ndkDir\\ndk-build.cmd" : "$ndkDir/ndk-build"
        commandLine ndkBuildPath,
                'NDK_PROJECT_PATH=' + file('src/main').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'NDK_DEBUG=0' // Force a release build
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = System.getenv("ANDROID_NDK_HOME")
        def ndkBuildPath = Os.isFamily(Os.FAMILY_WINDOWS) ? "$ndkDir\\ndk-build.cmd" : "$ndkDir/ndk-build"
        commandLine ndkBuildPath,
                'NDK_PROJECT_PATH=' + file('src/main').absolutePath,
                'clean'
    }
}

//@BEGINDELETE
artifactoryPublish.skip = true

artifactory {
    contextUrl = 'http://licensing.scichart.com:8081/artifactory'
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = "${artifactoryRepo}"
            maven = true
            username = "${artifactoryUser}"
            password = "${artifactoryPassword}"
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications ('aar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
            publishIvy = false
        }
        resolve {
            repository {
                repoKey = 'jcenter' // The Artifactory (preferably virtual) repository key to resolve from
                //username = "${artifactoryUser}" // Optional resolver user name (leave out to use anonymous resolution)
                //password = "${artifactoryPassword}" // The resolver password
                maven = true
            }
        }
    }
}
//@ENDDELETE
