import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'java'
buildscript {
    ext.kotlin_version = '1.1.0'
    ext.android_plugin_version = '2.3.0'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$android_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.1.1"
    }
}
ext {
    minSdkVersion = project.hasProperty('minSdkVersion') ? project.getProperty('minSdkVersion') : 19
    compileSdkVersion = project.hasProperty('compileSdkVersion') ? project.getProperty('compileSdkVersion') : 25
    buildToolsVersion = project.hasProperty('buildToolsVersion') ? project.getProperty('buildToolsVersion') : '25.0.2'
    sourceCompatibility = JavaVersion.VERSION_1_7
    minifyEnabled = false
    versionCode = 1
    versionName = "1.0"
    documentationFolder = "${rootDir}/outputJavadoc/"
}
allprojects {
    repositories {
        jcenter()
    }
    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = System.getenv("ANDROID_NDK_HOME")
        def ndkBuildPath = Os.isFamily(Os.FAMILY_WINDOWS) ? "$ndkDir\\ndk-build.cmd" : "$ndkDir/ndk-build"
        commandLine ndkBuildPath,
                'NDK_PROJECT_PATH=' + file('src/main').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'NDK_DEBUG=0' // Force a release build
    }
    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = System.getenv("ANDROID_NDK_HOME")
        def ndkBuildPath = Os.isFamily(Os.FAMILY_WINDOWS) ? "$ndkDir\\ndk-build.cmd" : "$ndkDir/ndk-build"
        commandLine ndkBuildPath,
                'NDK_PROJECT_PATH=' + file('src/main').absolutePath,
                'clean'
    }
}
clean {
    delete rootProject.buildDir
}
